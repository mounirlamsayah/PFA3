# docker-compose.yml - Déploiement local avec MLflow

version: '3.8'

services:
  # Application principale de classification
  pneumothorax-classifier:
    build: .
    container_name: pneumothorax-api
    ports:
      - "5000:5000"
    volumes:
      - "./outputs:/app/outputs:ro"
      - "./logs:/app/logs"
    environment:
      - MODEL_PATH=/app/outputs/trained_model.h5
      - FLASK_ENV=production
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ml-network

  # MLflow pour le suivi des modèles
  mlflow-server:
    image: python:3.10-slim
    container_name: mlflow-tracking
    ports:
      - "5001:5000"
    volumes:
      - "./mlruns:/mlflow/mlruns"
      - "./mlflow-artifacts:/mlflow/artifacts"
    working_dir: /mlflow
    command: >
      bash -c "
        pip install mlflow boto3 psycopg2-binary &&
        mlflow server 
        --backend-store-uri file:///mlflow/mlruns
        --default-artifact-root file:///mlflow/artifacts
        --host 0.0.0.0
        --port 5000
      "
    environment:
      - MLFLOW_TRACKING_URI=http://0.0.0.0:5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - ml-network

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - "./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ml-network

  # Interface de monitoring Grafana (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - "./monitoring/grafana:/var/lib/grafana"
    restart: unless-stopped
    networks:
      - ml-network

  # Nginx reverse proxy pour load balancing
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./nginx/ssl:/etc/nginx/ssl:ro"
    depends_on:
      - pneumothorax-classifier
      - mlflow-server
    restart: unless-stopped
    networks:
      - ml-network

networks:
  ml-network:
    driver: bridge

volumes:
  mlflow-data:
  grafana-data: